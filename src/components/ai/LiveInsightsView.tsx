import React, { useMemo, useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { observer } from 'mobx-react-lite';

// --- Custom Hooks & Stores ---
import { useGlobalServices } from '../../services/GlobalServicesContextProvider';

// --- UI Components ---
import { WindowTitle } from '../ui/WindowTitle';
import { WindowFooter } from '../ui/WindowFooter';
import { ScrollableContent } from '../ui/ScrollableContent';
import { Shortcut } from '../ui/Shortcut';
import { CopyButton } from '../ui/CopyButton';
import { AudioLines, Lightbulb } from 'lucide-react';

// --- Type Definitions ---
import { LiveInsights, LiveInsightsAction, LiveInsightsSummary } from '../../types';

interface LiveInsightsViewProps {
  onShowTranscript: () => void;
}

/**
 * Renders the live summary and suggested actions generated by the AI.
 */
export const LiveInsightsView = observer(({ onShowTranscript }: LiveInsightsViewProps) => {
  const { aiResponsesService, liveInsightsService } = useGlobalServices();
  const [isCopying, setIsCopying] = useState(false);

  const { insights, isGenerating, error } = liveInsightsService;

  const contentToCopy = useMemo(() => {
    if (!insights) return '';
    
    const summaryText = insights.summary.lines
      .filter(line => line.type === 'bullet')
      .map(line => line.text)
      .join('\n');
    const actionsText = insights.actions.length > 0 
      ? ["Actions:", ...insights.actions.map(action => `• ${action.text}`)].join('\n')
      : '';
    return [summaryText, actionsText].filter(Boolean).join('\n\n');
  }, [insights]);

  const titleShortcuts = (
    <div className="flex items-center gap-2">
      <Shortcut
        label={
          <div className="flex items-center gap-2">
            <span>Show Transcript</span>
            <AudioLines size={14} className="text-white/70" />
          </div>
        }
        accelerator="CommandOrControl+T"
        onTrigger={onShowTranscript}
      />
      <div
        onMouseEnter={() => setIsCopying(true)}
        onMouseLeave={() => setIsCopying(false)}
      >
        <CopyButton
          content={contentToCopy}
          size={16}
        />
      </div>
    </div>
  );

  return (
    <motion.div
      initial={{ opacity: 0, x: -40 }}
      animate={{ opacity: 1, x: 0 }}
      exit={{ opacity: 0, x: -40 }}
      transition={{ duration: 0.2, ease: 'easeOut' }}
    >
      <WindowTitle shortcuts={titleShortcuts}>
        <AnimatePresence mode="popLayout">
          <motion.p
            key={isCopying ? 'copy' : 'normal'}
            className="min-w-fit"
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: -20 }}
            transition={{ duration: 0.2, ease: 'easeOut' }}
          >
            {isCopying ? 'Copy Summary and Actions' : 'Live Insights'}
          </motion.p>
        </AnimatePresence>
      </WindowTitle>

      <ScrollableContent 
        maxHeight={400} 
        scrollToBottomKey={insights?.actions[insights.actions.length - 1]?.id}
        scrollDownAccelerator="CommandOrControl+Down"
        scrollUpAccelerator="CommandOrControl+Up"
        className="space-y-4"
      >
        {error ? (
          <div className="bg-red-500/10 border border-red-500/20 rounded-lg p-3">
            <p className="text-xs text-red-200">Error generating insights: {error}</p>
          </div>
        ) : isGenerating ? (
          <div className="bg-white/5 rounded-lg p-3">
            <p className="text-xs text-white/70">AI is analyzing the conversation...</p>
          </div>
        ) : insights ? (
          <>
            <SummarySection summary={insights.summary} />
            <ActionsSection actions={insights.actions} />
          </>
        ) : (
          <div className="bg-white/5 rounded-lg p-3">
            <p className="text-xs text-white/70">AI insights will appear here as the conversation progresses...</p>
          </div>
        )}
      </ScrollableContent>

      <WindowFooter>
        Click actions to ask AI
      </WindowFooter>
    </motion.div>
  );
});

// --- Sub-components for clarity ---

const SummarySection = observer(({ summary }: { summary: LiveInsightsSummary }) => (
  <div>
    {summary.lines.map((line, index) =>
      line.type === 'heading' ? (
        <h1 key={index} className="text-lg text-white/90 font-semibold mb-2">{line.text}</h1>
      ) : (
        <InsightItem key={index} indent={line.indent} text={line.text} />
      )
    )}
  </div>
));

const ActionsSection = observer(({ actions }: { actions: LiveInsightsAction[] }) => {
  const { aiResponsesService } = useGlobalServices();
  
  if (actions.length === 0) return null;

  return (
    <div className="mt-4">
      <h1 className="text-lg text-white/90 font-semibold mb-2">Actions</h1>
      {actions.map(action => (
        <InsightItem
          key={action.id}
          text={action.text}
          onClick={() => {
            aiResponsesService.triggerAi(
              false, // shouldCaptureScreenshot
              action.text, // manualInput
              action.useWebSearch || false // useWebSearch
            );
          }}
        />
      ))}
    </div>
  );
});

const InsightItem = ({ indent = 0, text, onClick }: { 
  indent?: number; 
  text: string; 
  onClick?: () => void; 
}) => (
  <div className="relative">
    {onClick && (
      <button
        className="absolute -inset-x-2 -inset-y-1 rounded hover:bg-white/10 focus:bg-white/20 transition duration-300"
        onClick={onClick}
      />
    )}
    <div className="flex items-start mb-1 pointer-events-none" style={{ paddingLeft: `${indent * 20}px` }}>
      <span className="mt-[2px] mr-2 text-white/70 text-xs">•</span>
      <p className="text-sm text-white/90">{text}</p>
    </div>
  </div>
); 